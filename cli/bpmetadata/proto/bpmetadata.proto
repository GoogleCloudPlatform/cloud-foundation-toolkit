syntax = "proto3";

package google.cloud.config.bpmetadata;

import "bpmetadata/proto/bpmetadata_ui.proto";

option go_package = "github.com/GoogleCloudPlatform/cloud-foundation-toolkit/cli/bpmetadata";

// BlueprintMetadata defines the overall structure for blueprint metadata.
// The cli command i.e. `cft blueprint metadata` attempts at auto-generating
// metadata if the blueprint is structured based on the TF blueprint template
// i.e. https://github.com/terraform-google-modules/terraform-google-module-template
// All fields within BlueprintMetadata and its children are denoted as:
// - Gen: auto-generated - <data source>
// - Gen: manually-authored
// - Gen: partial (contains nested messages that can include both auto-generated and manually authored)
message BlueprintMetadata {
  // APIVersion is the apiVersion field of a metadata file
  // Gen: auto-generated
  string api_version = 1;

  // Kind is the kind field of a metadata file
  // Gen: auto-generated
  string kind = 2;

  // ResourceTypeMeta is the metadata field of a metadata file
  // Gen: partial
  ResourceTypeMeta metadata = 3;

  // BlueprintMetadataSpec is the metadata specification for the blueprint
  // Gen: partial
  BlueprintMetadataSpec spec = 4;
}

message ResourceTypeMeta {
  // Name is the metadata.name field of a Resource
  // Gen: auto-generated
  string name = 1;

  // Labels is the metadata.labels field of a Resource
  // Gen: manually-authored
  map<string, string> labels = 2;

  // Annotations is the metadata.annotations field of a Resource.
  // Gen: auto-generated
  map<string, string> annotations = 3;
}

// BlueprintMetadataSpec defines the spec portion of the blueprint metadata.
message BlueprintMetadataSpec {
  // BlueprintInfo defines the basic information of the blueprint.
  // Gen: partial
  BlueprintInfo info = 1;

  // BlueprintContent defines the detail for blueprint related content such as
  // related documentation, diagrams, examples etc.
  // Gen: partial
  BlueprintContent content = 2;

  // BlueprintInterface defines the input and output variables for the blueprint.
  // Gen: partial
  BlueprintInterface interfaces = 3;

  // BlueprintRequirements defines the roles required and the associated services
  // that need to be enabled to provision blueprint resources.
  // Gen: auto-generated
  BlueprintRequirements requirements = 4;

  // BlueprintUI defines the user interface for the blueprint.
  // Gen: partial
  BlueprintUI ui = 5;
}

// BlueprintInfo defines the basic information of the blueprint.
message BlueprintInfo {
  // Title for the blueprint.
  // Gen: auto-generated - First H1 text in readme.md.
  string title = 1;

  // Blueprint source location and source type.
  // Gen: auto-generated - user will be prompted if repo information can not
  // be determined from the blueprint path.
  BlueprintRepoDetail source = 2;

  // Last released semantic version for the packaged blueprint.
  // Gen: auto-generated - From the `module_name` attribute of
  // the `provider_meta "google"` block.
  // E.g.
  // provider_meta "google" {
  //  module_name = "blueprints/terraform/terraform-google-log-analysis/v0.1.5"
  // }
  string version = 3;

  // Actuation tool e.g. Terraform and its required version.
  // Gen: auto-generated
  BlueprintActuationTool actuation_tool = 4;

  // Various types of descriptions associated with the blueprint.
  // Gen: auto-generated
  BlueprintDescription description = 5;

  // Path to an image representing the icon for the blueprint.
  // Will be set as "assets/icon.png", if present.
  // Gen: auto-generated
  string icon = 6;

  // The time estimate for configuring and deploying the blueprint.
  // Gen: auto-generated
  BlueprintTimeEstimate deployment_duration = 7;

  // The cost estimate for the blueprint based on preconfigured variables.
  // Gen: auto-generated
  BlueprintCostEstimate cost_estimate = 8;

  // A list of GCP cloud products used in the blueprint.
  // Gen: manually-authored
  repeated BlueprintCloudProduct cloud_products = 9;

  // A configuration of fixed and dynamic GCP quotas that apply to the blueprint.
  // Gen: manually-authored
  repeated BlueprintQuotaDetail quota_details = 10;

  // Details on the author producing the blueprint.
  // Gen: manually-authored
  BlueprintAuthor author = 11;

  // Details on software installed as part of the blueprint.
  // Gen: manually-authored
  repeated BlueprintSoftwareGroup software_groups = 12;

  // Support offered, if any for the blueprint.
  // Gen: manually-authored
  BlueprintSupport support_info = 13;

  // A list of GCP org policies to be checked for successful deployment.
  // Gen: manually-authored
  repeated BlueprintOrgPolicyCheck org_policy_checks = 14;

  // Specifies if the blueprint supports single or multiple deployments per GCP project.
  // If set to true, the blueprint can not be deployed more than once in the same GCP project.
  // Gen: manually-authored
  bool single_deployment = 15;
}

// BlueprintContent defines the detail for blueprint related content such as
// related documentation, diagrams, examples etc.
message BlueprintContent {
  // Gen: auto-generated
  BlueprintArchitecture architecture = 1;

  // Gen: manually-authored
  repeated BlueprintDiagram diagrams = 2;

  // Gen: auto-generated - the list content following the "## Documentation" tag. E.g.
  // ## Documentation
  // - [Hosting a Static Website](https://cloud.google.com/storage/docs/hosting-static-website)
  repeated BlueprintListContent documentation = 3;

  // Gen: auto-generated - blueprints under the modules/ folder.
  repeated BlueprintMiscContent sub_blueprints = 4;

  // Gen: auto-generated - examples under the examples/ folder.
  repeated BlueprintMiscContent examples = 5;
}

// BlueprintInterface defines the input and output variables for the blueprint.
message BlueprintInterface {
  // Gen: auto-generated - all defined variables for the blueprint
  repeated BlueprintVariable variables = 1;

  // Gen: manually-authored
  repeated BlueprintVariableGroup variable_groups = 2;

  // Gen: auto-generated - all defined outputs for the blueprint
  repeated BlueprintOutput outputs = 3;
}

// BlueprintRequirements defines the roles required and the associated services
// that need to be enabled to provision blueprint resources.
message BlueprintRequirements {
  // Gen: auto-generated - all roles required for the blueprint in test/setup/iam.tf
  // as the "int_required_roles" local. E.g.
  // locals {
  //   int_required_roles = [
  //     "roles/compute.admin",
  //   ]
  // }
  repeated BlueprintRoles roles = 1;

  // Gen: auto-generated - all services required for the blueprint in test/setup/main.tf
  // as "activate_apis" in the project module.
  repeated string services = 2;
}

// BlueprintUI is the top-level structure for holding UI specific metadata.
message BlueprintUI {
  // The top-level input section that defines the list of variables and
  // their sections on the deployment page.
  // Gen: partial
  BlueprintUIInput input = 1;

  // The top-level section for listing runtime (or blueprint output) information
  // i.e. the console URL for the VM or a button to ssh into the VM etc based on.
  // Gen: manually-authored
  BlueprintUIOutput runtime = 2;
}

message BlueprintRepoDetail {
  // Gen: auto-generated - URL from the .git dir.
  // Can be manually overridden with a custom URL if needed.
  string repo = 1;

  // Gen: auto-generated - set as "git" for now until more
  // types are supported.
  string source_type = 2;

  // Gen: auto-generated - not set for root modules but
  // set as the module name for submodules, if found.
  string dir = 3;
}

// BlueprintActuationTool defines the actuation tool used to provision the blueprint.
message BlueprintActuationTool {
  // Gen: auto-generated - set as "Terraform" for now until
  //more flavors are supported.
  string flavor = 1;

  // Required version for the actuation tool.
  // Gen: auto-generated - For Terraform this is the `required_version`
  // set in `terraform` block. E.g.
  // terraform {
  //   required_version = ">= 0.13"
  // }
  string version = 2;
}

// All descriptions are set with the markdown content immediately
// after each type's heading declaration in readme.md.
message BlueprintDescription {
  // Gen: auto-generated - Markdown after "### Tagline".
  string tagline = 1;

  // Gen: auto-generated - Markdown after "### Detailed".
  string detailed = 2;

  // Gen: auto-generated - Markdown after "### PreDeploy".
  string pre_deploy = 3;

  // Gen: auto-generated - Markdown after "### Html".
  string html = 4;

  // Gen: auto-generated - Markdown after "### EulaUrls".
  repeated string eula_urls = 5;

  // Gen: auto-generated - Markdown after "### Architecture"
  // Deprecated. Use BlueprintContent.Architecture instead.
  repeated string architecture = 6;
}

// A time estimate in secs required for configuring and deploying the blueprint.
message BlueprintTimeEstimate {
  // Gen: auto-generated - Set using the content defined under "### DeploymentTime" E.g.
  // ### DeploymentTime
  // - Configuration: X secs
  // - Deployment: Y secs
  int32 configuration_secs = 1;
  int32 deployment_secs = 2;
}

// The cost estimate for the blueprint based on pre-configured variables.
message BlueprintCostEstimate {
  // Gen: auto-generated - Set using the content defined under "### Cost" as a link
  // with a description E.g.
  // ### Cost
  // [$20.00](https://cloud.google.com/products/calculator?hl=en_US&_ga=2.1665458.-226505189.1675191136#id=02fb0c45-cc29-4567-8cc6-f72ac9024add)
  string description = 1;
  string url = 2;
}

// GCP cloud product(s) used in the blueprint.
message BlueprintCloudProduct {
  // A top-level (e.g. "Compute Engine") or secondary (e.g. "Binary Authorization")
  // product used in the blueprint.
  // Gen: manually-authored
  string product_id = 1;

  // Url for the product.
  // Gen: manually-authored
  string page_url = 2;

  // A label string for the product, if it is not an integrated GCP product.
  // E.g. "Data Studio"
  // Gen: manually-authored
  string label = 3;

  // Is the product's landing page external to the GCP console e.g.
  // lookerstudio.google.com
  // Gen: manually-authored
  bool is_external = 4;
}

// BlueprintOrgPolicyCheck defines GCP org policies to be checked
// for successful deployment
message BlueprintOrgPolicyCheck {
  // Id for the policy e.g. "compute-vmExternalIpAccess"
  // Gen: manually-authored
  string policy_id = 1;

  // If not set, it is assumed any version of this org policy
  // prevents successful deployment of this solution.
  // Gen: manually-authored
  repeated string required_values = 2;
}

// QuotaResourceType defines the type of resource a quota is applied to.
enum QuotaResourceType {
  QRT_UNDEFINED = 0;
  QRT_RESOURCE_TYPE_GCE_INSTANCE = 1;
  QRT_RESOURCE_TYPE_GCE_DISK = 2;
}

// BlueprintQuotaDetail defines the quota details for a blueprint.
message BlueprintQuotaDetail {
  // DynamicVariable, if provided, associates the provided input variable
  // with the corresponding resource and quota type. In its absence, the quota
  // detail is assumed to be fixed.
  // Gen: manually-authored
  string dynamic_variable = 1;

  // ResourceType is the type of resource the quota will be applied to i.e.
  // GCE Instance or Disk etc.
  // Gen: manually-authored
  QuotaResourceType resource_type = 2;

  // QuotaType is a key/value pair of the actual quotas and their corresponding
  // values. Valid keys for quota_type can be:
  // MACHINE_TYPE,
  // CPUs,
  // DISK_TYPE OR
  // SIZE_GB.
  // Gen: manually-authored
  map<string, string> quota_type = 3;
}

// BlueprintAuthor defines the author of a blueprint.
message BlueprintAuthor {
  // Name of template author or organization.
  // Gen: manually-authored
  string title = 1;

  // Description of the author.
  // Gen: manually-authored
  string description = 2;

  // Link to the author's website.
  // Gen: manually-authored
  string url = 3;
}

// SoftwareGroupType is a string enum representing the different types of software groups.
enum SoftwareGroupType {
  // UNSPECIFIED is the default value for SoftwareGroupType.
  SG_UNSPECIFIED = 0;
  // OS is a software group that represents an operating system.
  SG_OS = 1;
}

// A group of related software components for the blueprint.
message BlueprintSoftwareGroup {
  // Pre-defined software types.
  // Gen: manually-authored
  SoftwareGroupType type = 1;

  // Software components belonging to this group.
  // Gen: manually-authored
  repeated BlueprintSoftware software = 2;
}

// A description of a piece of a single software component
// installed by the blueprint.
message BlueprintSoftware {
  // User-visible title.
  // Gen: manually-authored
  string title = 1;

  // Software version.
  // Gen: manually-authored
  string version = 2;

  // Link to development site or marketing page for this software.
  // Gen: manually-authored
  string url = 3;

  // Link to license page.
  // Gen: manually-authored
  string license_url = 4;
}

// A description of a support option
message BlueprintSupport {
  // Description of the support option.
  // Gen: manually-authored
  string description = 1;

  // Link to the page providing this support option.
  // Gen: manually-authored
  string url = 2;

  // The organization or group that provides the support option (e.g.:
  // "Community", "Google").
  // Gen: manually-authored
  string entity = 3;

  // Whether to show the customer's support ID.
  // Gen: manually-authored
  bool show_support_id = 4;
}

message BlueprintArchitecture {
  // Gen: auto-generated - the URL & list content following the "## Architecture" tag e.g.
  // ## Architecture
  // ![Blueprint Architecture](assets/architecture.png)
  // 1. Step no. 1
  // 2. Step no. 2
  // 3. Step no. 3
  string diagram_url = 1;

  // Gen: auto-generated - the list items following the "## Architecture" tag.
  repeated string description = 2;
}

message BlueprintMiscContent {
  string name = 1;
  string location = 2;
}

message BlueprintDiagram {
  string name = 1;
  string alt_text = 2;
  string description = 3;
}

message BlueprintListContent {
  string title = 1;
  string url = 2;
}

message BlueprintVariable {
  string name = 1;
  string description = 2;
  string var_type = 3;
  string default_value = 4;
  bool required = 5;
}

// BlueprintVariableGroup is manually entered.
message BlueprintVariableGroup {
  string name = 1;
  string description = 2;
  repeated string variables = 3;
}

message BlueprintOutput {
  string name = 1;
  string description = 2;
}

message BlueprintRoles {
  string level = 1;
  repeated string roles = 2;
}
