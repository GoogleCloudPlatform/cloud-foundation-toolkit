// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: bpmetadata_ui_ext.proto

package bpmetadata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExtensionType specifies the type of extension.
type ExtensionType int32

const (
	// EXTENSIONTYPE_UNDEFINED indicates that the extension type is undefined.
	ExtensionType_ET_UNDEFINED ExtensionType = 0
	// General formats.
	ExtensionType_ET_EMAIL_ADDRESS     ExtensionType = 1
	ExtensionType_ET_MULTI_LINE_STRING ExtensionType = 2
	// GCE related.
	ExtensionType_ET_GCE_DISK_IMAGE       ExtensionType = 3
	ExtensionType_ET_GCE_DISK_TYPE        ExtensionType = 4
	ExtensionType_ET_GCE_DISK_SIZE        ExtensionType = 5
	ExtensionType_ET_GCE_MACHINE_TYPE     ExtensionType = 6
	ExtensionType_ET_GCE_NETWORK          ExtensionType = 7
	ExtensionType_ET_GCE_ZONE             ExtensionType = 8
	ExtensionType_ET_GCE_SUBNETWORK       ExtensionType = 9
	ExtensionType_ET_GCE_REGION           ExtensionType = 10
	ExtensionType_ET_GCE_GPU_TYPE         ExtensionType = 11
	ExtensionType_ET_GCE_GPU_COUNT        ExtensionType = 12
	ExtensionType_ET_GCE_EXTERNAL_IP      ExtensionType = 13
	ExtensionType_ET_GCE_IP_FORWARDING    ExtensionType = 14
	ExtensionType_ET_GCE_FIREWALL         ExtensionType = 15
	ExtensionType_ET_GCE_FIREWALL_RANGE   ExtensionType = 16
	ExtensionType_ET_GCE_GENERIC_RESOURCE ExtensionType = 17
	// GCS related.
	ExtensionType_ET_GCS_BUCKET ExtensionType = 18
	// IAM related.
	ExtensionType_ET_IAM_SERVICE_ACCOUNT ExtensionType = 19
	// GKE related.
	ExtensionType_ET_GKE_CLUSTER ExtensionType = 20
)

// Enum value maps for ExtensionType.
var (
	ExtensionType_name = map[int32]string{
		0:  "ET_UNDEFINED",
		1:  "ET_EMAIL_ADDRESS",
		2:  "ET_MULTI_LINE_STRING",
		3:  "ET_GCE_DISK_IMAGE",
		4:  "ET_GCE_DISK_TYPE",
		5:  "ET_GCE_DISK_SIZE",
		6:  "ET_GCE_MACHINE_TYPE",
		7:  "ET_GCE_NETWORK",
		8:  "ET_GCE_ZONE",
		9:  "ET_GCE_SUBNETWORK",
		10: "ET_GCE_REGION",
		11: "ET_GCE_GPU_TYPE",
		12: "ET_GCE_GPU_COUNT",
		13: "ET_GCE_EXTERNAL_IP",
		14: "ET_GCE_IP_FORWARDING",
		15: "ET_GCE_FIREWALL",
		16: "ET_GCE_FIREWALL_RANGE",
		17: "ET_GCE_GENERIC_RESOURCE",
		18: "ET_GCS_BUCKET",
		19: "ET_IAM_SERVICE_ACCOUNT",
		20: "ET_GKE_CLUSTER",
	}
	ExtensionType_value = map[string]int32{
		"ET_UNDEFINED":            0,
		"ET_EMAIL_ADDRESS":        1,
		"ET_MULTI_LINE_STRING":    2,
		"ET_GCE_DISK_IMAGE":       3,
		"ET_GCE_DISK_TYPE":        4,
		"ET_GCE_DISK_SIZE":        5,
		"ET_GCE_MACHINE_TYPE":     6,
		"ET_GCE_NETWORK":          7,
		"ET_GCE_ZONE":             8,
		"ET_GCE_SUBNETWORK":       9,
		"ET_GCE_REGION":           10,
		"ET_GCE_GPU_TYPE":         11,
		"ET_GCE_GPU_COUNT":        12,
		"ET_GCE_EXTERNAL_IP":      13,
		"ET_GCE_IP_FORWARDING":    14,
		"ET_GCE_FIREWALL":         15,
		"ET_GCE_FIREWALL_RANGE":   16,
		"ET_GCE_GENERIC_RESOURCE": 17,
		"ET_GCS_BUCKET":           18,
		"ET_IAM_SERVICE_ACCOUNT":  19,
		"ET_GKE_CLUSTER":          20,
	}
)

func (x ExtensionType) Enum() *ExtensionType {
	p := new(ExtensionType)
	*p = x
	return p
}

func (x ExtensionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bpmetadata_ui_ext_proto_enumTypes[0].Descriptor()
}

func (ExtensionType) Type() protoreflect.EnumType {
	return &file_bpmetadata_ui_ext_proto_enumTypes[0]
}

func (x ExtensionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionType.Descriptor instead.
func (ExtensionType) EnumDescriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{0}
}

// ExternalIPType specifies the type of external IP address.
type ExternalIPType int32

const (
	ExternalIPType_IP_UNSPECIFIED ExternalIPType = 0
	// EPHEMERAL indicates that the external IP address is ephemeral.
	ExternalIPType_IP_EPHEMERAL ExternalIPType = 1
	// STATIC indicates that the external IP address is static.
	ExternalIPType_IP_STATIC ExternalIPType = 2
	// NONE indicates that an external IP is not assigned.
	ExternalIPType_IP_NONE ExternalIPType = 3
)

// Enum value maps for ExternalIPType.
var (
	ExternalIPType_name = map[int32]string{
		0: "IP_UNSPECIFIED",
		1: "IP_EPHEMERAL",
		2: "IP_STATIC",
		3: "IP_NONE",
	}
	ExternalIPType_value = map[string]int32{
		"IP_UNSPECIFIED": 0,
		"IP_EPHEMERAL":   1,
		"IP_STATIC":      2,
		"IP_NONE":        3,
	}
)

func (x ExternalIPType) Enum() *ExternalIPType {
	p := new(ExternalIPType)
	*p = x
	return p
}

func (x ExternalIPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalIPType) Descriptor() protoreflect.EnumDescriptor {
	return file_bpmetadata_ui_ext_proto_enumTypes[1].Descriptor()
}

func (ExternalIPType) Type() protoreflect.EnumType {
	return &file_bpmetadata_ui_ext_proto_enumTypes[1]
}

func (x ExternalIPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalIPType.Descriptor instead.
func (ExternalIPType) EnumDescriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{1}
}

// An extension for variables defined as part of DisplayVariable. The
// extension defines Google-specifc metadata necessary for choosing an
// appropriate input widget or adding restrictions to GCP-specific resources.
type GooglePropertyExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type specifies the type of extension.
	// Gen: manually-authored
	Type ExtensionType `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.config.bpmetadata.ExtensionType" json:"type" yaml:"type"` // @gotags: json:"type" yaml:"type"
	// Some properties (e.g. GCE_MACHINE_TYPE) require a zone context in order to
	// determine the set of allowable values. This field references another
	// property from the schema, which must have type GCE_ZONE.
	// Gen: manually-authored
	ZoneProperty string `protobuf:"bytes,2,opt,name=zone_property,json=zoneProperty,proto3" json:"zoneProperty,omitempty" yaml:"zoneProperty,omitempty"` // @gotags: json:"zoneProperty,omitempty" yaml:"zoneProperty,omitempty"
	// Property-specific extensions.
	// Gen: manually-authored (all property extensions and their child properties)
	GceMachineType    *GCEMachineTypeExtension     `protobuf:"bytes,3,opt,name=gce_machine_type,json=gceMachineType,proto3" json:"gceMachineType,omitempty" yaml:"gceMachineType,omitempty"`           // @gotags: json:"gceMachineType,omitempty" yaml:"gceMachineType,omitempty"
	GceDiskSize       *GCEDiskSizeExtension        `protobuf:"bytes,4,opt,name=gce_disk_size,json=gceDiskSize,proto3" json:"gceDiskSize,omitempty" yaml:"gceDiskSize,omitempty"`                    // @gotags: json:"gceDiskSize,omitempty" yaml:"gceDiskSize,omitempty"
	GceSubnetwork     *GCESubnetworkExtension      `protobuf:"bytes,5,opt,name=gce_subnetwork,json=gceSubnetwork,proto3" json:"gceSubnetwork,omitempty" yaml:"gceSubnetwork,omitempty"`                // @gotags: json:"gceSubnetwork,omitempty" yaml:"gceSubnetwork,omitempty"
	GceResource       *GCEGenericResourceExtension `protobuf:"bytes,6,opt,name=gce_resource,json=gceResource,proto3" json:"gceResource,omitempty" yaml:"gceResource,omitempty"`                      // @gotags: json:"gceResource,omitempty" yaml:"gceResource,omitempty"
	GceGpuType        *GCEGPUTypeExtension         `protobuf:"bytes,7,opt,name=gce_gpu_type,json=gceGpuType,proto3" json:"gceGpuType,omitempty" yaml:"gceGpuType,omitempty"`                       // @gotags: json:"gceGpuType,omitempty" yaml:"gceGpuType,omitempty"
	GceGpuCount       *GCEGPUCountExtension        `protobuf:"bytes,8,opt,name=gce_gpu_count,json=gceGpuCount,proto3" json:"gceGpuCount,omitempty" yaml:"gceGpuCount,omitempty"`                    // @gotags: json:"gceGpuCount,omitempty" yaml:"gceGpuCount,omitempty"
	GceNetwork        *GCENetworkExtension         `protobuf:"bytes,9,opt,name=gce_network,json=gceNetwork,proto3" json:"gceNetwork,omitempty" yaml:"gceNetwork,omitempty"`                         // @gotags: json:"gceNetwork,omitempty" yaml:"gceNetwork,omitempty"
	GceExternalIp     *GCEExternalIPExtension      `protobuf:"bytes,10,opt,name=gce_external_ip,json=gceExternalIp,proto3" json:"gceExternalIp,omitempty" yaml:"gceExternalIp,omitempty"`             // @gotags: json:"gceExternalIp,omitempty" yaml:"gceExternalIp,omitempty"
	GceIpForwarding   *GCEIPForwardingExtension    `protobuf:"bytes,11,opt,name=gce_ip_forwarding,json=gceIpForwarding,proto3" json:"gceIpForwarding,omitempty" yaml:"gceIpForwarding,omitempty"`       // @gotags: json:"gceIpForwarding,omitempty" yaml:"gceIpForwarding,omitempty"
	GceFirewall       *GCEFirewallExtension        `protobuf:"bytes,12,opt,name=gce_firewall,json=gceFirewall,proto3" json:"gceFirewall,omitempty" yaml:"gceFirewall,omitempty"`                     // @gotags: json:"gceFirewall,omitempty" yaml:"gceFirewall,omitempty"
	GceFirewallRange  *GCEFirewallRangeExtension   `protobuf:"bytes,13,opt,name=gce_firewall_range,json=gceFirewallRange,proto3" json:"gceFirewallRange,omitempty" yaml:"gceFirewallRange,omitempty"`    // @gotags: json:"gceFirewallRange,omitempty" yaml:"gceFirewallRange,omitempty"
	GceZone           *GCELocationExtension        `protobuf:"bytes,14,opt,name=gce_zone,json=gceZone,proto3" json:"gceZone,omitempty" yaml:"gceZone,omitempty"`                                 // @gotags: json:"gceZone,omitempty" yaml:"gceZone,omitempty"
	GceRegion         *GCELocationExtension        `protobuf:"bytes,15,opt,name=gce_region,json=gceRegion,proto3" json:"gceRegion,omitempty" yaml:"gceRegion,omitempty"`                           // @gotags: json:"gceRegion,omitempty" yaml:"gceRegion,omitempty"
	IamServiceAccount *IAMServiceAccountExtension  `protobuf:"bytes,16,opt,name=iam_service_account,json=iamServiceAccount,proto3" json:"iamServiceAccount,omitempty" yaml:"iamServiceAccount,omitempty"` // @gotags: json:"iamServiceAccount,omitempty" yaml:"iamServiceAccount,omitempty"
	GceDiskType       *GCEDiskTypeExtension        `protobuf:"bytes,17,opt,name=gce_disk_type,json=gceDiskType,proto3" json:"gceDiskType,omitempty" yaml:"gceDiskType,omitempty"`                   // @gotags: json:"gceDiskType,omitempty" yaml:"gceDiskType,omitempty"
}

func (x *GooglePropertyExtension) Reset() {
	*x = GooglePropertyExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GooglePropertyExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GooglePropertyExtension) ProtoMessage() {}

func (x *GooglePropertyExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GooglePropertyExtension.ProtoReflect.Descriptor instead.
func (*GooglePropertyExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{0}
}

func (x *GooglePropertyExtension) GetType() ExtensionType {
	if x != nil {
		return x.Type
	}
	return ExtensionType_ET_UNDEFINED
}

func (x *GooglePropertyExtension) GetZoneProperty() string {
	if x != nil {
		return x.ZoneProperty
	}
	return ""
}

func (x *GooglePropertyExtension) GetGceMachineType() *GCEMachineTypeExtension {
	if x != nil {
		return x.GceMachineType
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceDiskSize() *GCEDiskSizeExtension {
	if x != nil {
		return x.GceDiskSize
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceSubnetwork() *GCESubnetworkExtension {
	if x != nil {
		return x.GceSubnetwork
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceResource() *GCEGenericResourceExtension {
	if x != nil {
		return x.GceResource
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceGpuType() *GCEGPUTypeExtension {
	if x != nil {
		return x.GceGpuType
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceGpuCount() *GCEGPUCountExtension {
	if x != nil {
		return x.GceGpuCount
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceNetwork() *GCENetworkExtension {
	if x != nil {
		return x.GceNetwork
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceExternalIp() *GCEExternalIPExtension {
	if x != nil {
		return x.GceExternalIp
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceIpForwarding() *GCEIPForwardingExtension {
	if x != nil {
		return x.GceIpForwarding
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceFirewall() *GCEFirewallExtension {
	if x != nil {
		return x.GceFirewall
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceFirewallRange() *GCEFirewallRangeExtension {
	if x != nil {
		return x.GceFirewallRange
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceZone() *GCELocationExtension {
	if x != nil {
		return x.GceZone
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceRegion() *GCELocationExtension {
	if x != nil {
		return x.GceRegion
	}
	return nil
}

func (x *GooglePropertyExtension) GetIamServiceAccount() *IAMServiceAccountExtension {
	if x != nil {
		return x.IamServiceAccount
	}
	return nil
}

func (x *GooglePropertyExtension) GetGceDiskType() *GCEDiskTypeExtension {
	if x != nil {
		return x.GceDiskType
	}
	return nil
}

// GCELocationExtension specifies a location extension for a Google Compute Engine (GCE) resource.
type GCELocationExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowlistedZones is a list of zones that are allowed for the resource.
	AllowlistedZones []string `protobuf:"bytes,1,rep,name=allowlisted_zones,json=allowlistedZones,proto3" json:"allowlistedZones,omitempty" yaml:"allowlistedZones,omitempty"` // @gotags: json:"allowlistedZones,omitempty" yaml:"allowlistedZones,omitempty"
	// AllowlistedRegions is a list of regions that are allowed for the resource.
	AllowlistedRegions []string `protobuf:"bytes,2,rep,name=allowlisted_regions,json=allowlistedRegions,proto3" json:"allowlistedRegions,omitempty" yaml:"allowlistedRegions,omitempty"` // @gotags: json:"allowlistedRegions,omitempty" yaml:"allowlistedRegions,omitempty"
}

func (x *GCELocationExtension) Reset() {
	*x = GCELocationExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCELocationExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCELocationExtension) ProtoMessage() {}

func (x *GCELocationExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCELocationExtension.ProtoReflect.Descriptor instead.
func (*GCELocationExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{1}
}

func (x *GCELocationExtension) GetAllowlistedZones() []string {
	if x != nil {
		return x.AllowlistedZones
	}
	return nil
}

func (x *GCELocationExtension) GetAllowlistedRegions() []string {
	if x != nil {
		return x.AllowlistedRegions
	}
	return nil
}

// GCEMachineTypeExtension specifies a machine type extension for a GCE resource.
type GCEMachineTypeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum cpu. Used to filter the list of selectable machine types.
	MinCpu int32 `protobuf:"varint,1,opt,name=min_cpu,json=minCpu,proto3" json:"minCpu,omitempty" yaml:"minCpu,omitempty"` // @gotags: json:"minCpu,omitempty" yaml:"minCpu,omitempty"
	// Minimum ram. Used to filter the list of selectable machine types.
	MinRamGb float32 `protobuf:"fixed32,2,opt,name=min_ram_gb,json=minRamGb,proto3" json:"minRamGb,omitempty" yaml:"minRamGb,omitempty"` // @gotags: json:"minRamGb,omitempty" yaml:"minRamGb,omitempty"
	// If true, custom machine types will not be selectable.
	// More info:
	// https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type
	DisallowCustomMachineTypes bool `protobuf:"varint,3,opt,name=disallow_custom_machine_types,json=disallowCustomMachineTypes,proto3" json:"disallowCustomMachineTypes,omitempty" yaml:"disallowCustomMachineTypes,omitempty"` // @gotags: json:"disallowCustomMachineTypes,omitempty" yaml:"disallowCustomMachineTypes,omitempty"
	// Disk Image allows us to reference the image that is being used
	// to help provide/gather data such as the image architecture.
	DiskImageProperty string `protobuf:"bytes,4,opt,name=disk_image_property,json=diskImageProperty,proto3" json:"diskImageProperty,omitempty" yaml:"diskImageProperty,omitempty"` // @gotags: json:"diskImageProperty,omitempty" yaml:"diskImageProperty,omitempty"
}

func (x *GCEMachineTypeExtension) Reset() {
	*x = GCEMachineTypeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEMachineTypeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEMachineTypeExtension) ProtoMessage() {}

func (x *GCEMachineTypeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEMachineTypeExtension.ProtoReflect.Descriptor instead.
func (*GCEMachineTypeExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{2}
}

func (x *GCEMachineTypeExtension) GetMinCpu() int32 {
	if x != nil {
		return x.MinCpu
	}
	return 0
}

func (x *GCEMachineTypeExtension) GetMinRamGb() float32 {
	if x != nil {
		return x.MinRamGb
	}
	return 0
}

func (x *GCEMachineTypeExtension) GetDisallowCustomMachineTypes() bool {
	if x != nil {
		return x.DisallowCustomMachineTypes
	}
	return false
}

func (x *GCEMachineTypeExtension) GetDiskImageProperty() string {
	if x != nil {
		return x.DiskImageProperty
	}
	return ""
}

// GCEGPUTypeExtension specifies a GPU type extension for a GCE resource.
type GCEGPUTypeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MachineType is the name of the machine type that the GPU is attached to.
	MachineType string `protobuf:"bytes,1,opt,name=machine_type,json=machineType,proto3" json:"machineType" yaml:"machineType"` // @gotags: json:"machineType" yaml:"machineType"
	// GPUType is the type(s) of GPU that is attached to the machine.
	GpuType []string `protobuf:"bytes,2,rep,name=gpu_type,json=gpuType,proto3" json:"gpuType,omitempty" yaml:"gpuType,omitempty"` // @gotags: json:"gpuType,omitempty" yaml:"gpuType,omitempty"
}

func (x *GCEGPUTypeExtension) Reset() {
	*x = GCEGPUTypeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEGPUTypeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEGPUTypeExtension) ProtoMessage() {}

func (x *GCEGPUTypeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEGPUTypeExtension.ProtoReflect.Descriptor instead.
func (*GCEGPUTypeExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{3}
}

func (x *GCEGPUTypeExtension) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GCEGPUTypeExtension) GetGpuType() []string {
	if x != nil {
		return x.GpuType
	}
	return nil
}

// GCEGPUCountExtension specifies the number of GPUs that should be attached to a machine.
type GCEGPUCountExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field references another variable from the schema,
	// which must have type GCEMachineType.
	MachineTypeVariable string `protobuf:"bytes,1,opt,name=machine_type_variable,json=machineTypeVariable,proto3" json:"machineTypeVariable" yaml:"machineTypeVariable"` // @gotags: json:"machineTypeVariable" yaml:"machineTypeVariable"
}

func (x *GCEGPUCountExtension) Reset() {
	*x = GCEGPUCountExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEGPUCountExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEGPUCountExtension) ProtoMessage() {}

func (x *GCEGPUCountExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEGPUCountExtension.ProtoReflect.Descriptor instead.
func (*GCEGPUCountExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{4}
}

func (x *GCEGPUCountExtension) GetMachineTypeVariable() string {
	if x != nil {
		return x.MachineTypeVariable
	}
	return ""
}

// GCEDiskTypeExtension specifies the type of disk for a GCE resource.
type GCEDiskTypeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field references another variable from the schema,
	// which must have type GCEMachineType.
	MachineTypeVariable string `protobuf:"bytes,1,opt,name=machine_type_variable,json=machineTypeVariable,proto3" json:"machineTypeVariable" yaml:"machineTypeVariable"` // @gotags: json:"machineTypeVariable" yaml:"machineTypeVariable"
}

func (x *GCEDiskTypeExtension) Reset() {
	*x = GCEDiskTypeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEDiskTypeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEDiskTypeExtension) ProtoMessage() {}

func (x *GCEDiskTypeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEDiskTypeExtension.ProtoReflect.Descriptor instead.
func (*GCEDiskTypeExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{5}
}

func (x *GCEDiskTypeExtension) GetMachineTypeVariable() string {
	if x != nil {
		return x.MachineTypeVariable
	}
	return ""
}

// GCEDiskSizeExtension specifies the size of a disk for a GCE resource.
type GCEDiskSizeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The allowable range of disk sizes depends on the disk type. This field
	// references another variable from the schema, which must have type GCEDiskType.
	DiskTypeVariable string `protobuf:"bytes,1,opt,name=disk_type_variable,json=diskTypeVariable,proto3" json:"diskTypeVariable" yaml:"diskTypeVariable"` // @gotags: json:"diskTypeVariable" yaml:"diskTypeVariable"
}

func (x *GCEDiskSizeExtension) Reset() {
	*x = GCEDiskSizeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEDiskSizeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEDiskSizeExtension) ProtoMessage() {}

func (x *GCEDiskSizeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEDiskSizeExtension.ProtoReflect.Descriptor instead.
func (*GCEDiskSizeExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{6}
}

func (x *GCEDiskSizeExtension) GetDiskTypeVariable() string {
	if x != nil {
		return x.DiskTypeVariable
	}
	return ""
}

// GCENetworkExtension specifies a network extension for a GCE resource.
type GCENetworkExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowSharedVpcs indicates this solution can receive
	// shared VPC selflinks (fully qualified compute links).
	AllowSharedVpcs bool `protobuf:"varint,1,opt,name=allow_shared_vpcs,json=allowSharedVpcs,proto3" json:"allowSharedVpcs,omitempty" yaml:"allowSharedVpcs,omitempty"` // @gotags: json:"allowSharedVpcs,omitempty" yaml:"allowSharedVpcs,omitempty"
	// Used to indicate to which machine type this network interface will be
	// attached to.
	MachineTypeVariable string `protobuf:"bytes,2,opt,name=machine_type_variable,json=machineTypeVariable,proto3" json:"machineTypeVariable" yaml:"machineTypeVariable"` // @gotags: json:"machineTypeVariable" yaml:"machineTypeVariable"
	// Label that will be in front of each Network Interface.
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" yaml:"labels,omitempty"` // @gotags: json:"labels,omitempty" yaml:"labels,omitempty"
}

func (x *GCENetworkExtension) Reset() {
	*x = GCENetworkExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCENetworkExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCENetworkExtension) ProtoMessage() {}

func (x *GCENetworkExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCENetworkExtension.ProtoReflect.Descriptor instead.
func (*GCENetworkExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{7}
}

func (x *GCENetworkExtension) GetAllowSharedVpcs() bool {
	if x != nil {
		return x.AllowSharedVpcs
	}
	return false
}

func (x *GCENetworkExtension) GetMachineTypeVariable() string {
	if x != nil {
		return x.MachineTypeVariable
	}
	return ""
}

func (x *GCENetworkExtension) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GCEExternalIPExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkVariable is the name of the network variable that the external IP address belongs to.
	NetworkVariable string `protobuf:"bytes,1,opt,name=network_variable,json=networkVariable,proto3" json:"networkVariable" yaml:"networkVariable"` // @gotags: json:"networkVariable" yaml:"networkVariable"
	// Type specifies the type of external IP address. Defaults to EPHEMERAL if not specified.
	Type ExternalIPType `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.config.bpmetadata.ExternalIPType" json:"type,omitempty" yaml:"type,omitempty"` // @gotags: json:"type,omitempty" yaml:"type,omitempty"
	// Flag to denote if an external IP should be configurable.
	NotConfigurable bool `protobuf:"varint,3,opt,name=not_configurable,json=notConfigurable,proto3" json:"notConfigurable,omitempty" yaml:"notConfigurable,omitempty"` // @gotags: json:"notConfigurable,omitempty" yaml:"notConfigurable,omitempty"
	// Flag to denote if static IPs are allowed for the external IP.
	AllowStaticIps bool `protobuf:"varint,4,opt,name=allow_static_ips,json=allowStaticIps,proto3" json:"allowStaticIps,omitempty" yaml:"allowStaticIps,omitempty"` // @gotags: json:"allowStaticIps,omitempty" yaml:"allowStaticIps,omitempty"
}

func (x *GCEExternalIPExtension) Reset() {
	*x = GCEExternalIPExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEExternalIPExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEExternalIPExtension) ProtoMessage() {}

func (x *GCEExternalIPExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEExternalIPExtension.ProtoReflect.Descriptor instead.
func (*GCEExternalIPExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{8}
}

func (x *GCEExternalIPExtension) GetNetworkVariable() string {
	if x != nil {
		return x.NetworkVariable
	}
	return ""
}

func (x *GCEExternalIPExtension) GetType() ExternalIPType {
	if x != nil {
		return x.Type
	}
	return ExternalIPType_IP_UNSPECIFIED
}

func (x *GCEExternalIPExtension) GetNotConfigurable() bool {
	if x != nil {
		return x.NotConfigurable
	}
	return false
}

func (x *GCEExternalIPExtension) GetAllowStaticIps() bool {
	if x != nil {
		return x.AllowStaticIps
	}
	return false
}

// GCEIPForwardingExtension specifies an IP forwarding extension for a GCE resource.
type GCEIPForwardingExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkVariable is the name of the network variable that the IP forwarding belongs to.
	NetworkVariable string `protobuf:"bytes,1,opt,name=network_variable,json=networkVariable,proto3" json:"networkVariable" yaml:"networkVariable"` // @gotags: json:"networkVariable" yaml:"networkVariable"
	// NotConfigurable specifies whether the IP forwarding is configurable. Defaults to false if not specified.
	NotConfigurable bool `protobuf:"varint,2,opt,name=not_configurable,json=notConfigurable,proto3" json:"notConfigurable,omitempty" yaml:"notConfigurable,omitempty"` // @gotags: json:"notConfigurable,omitempty" yaml:"notConfigurable,omitempty"
}

func (x *GCEIPForwardingExtension) Reset() {
	*x = GCEIPForwardingExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEIPForwardingExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEIPForwardingExtension) ProtoMessage() {}

func (x *GCEIPForwardingExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEIPForwardingExtension.ProtoReflect.Descriptor instead.
func (*GCEIPForwardingExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{9}
}

func (x *GCEIPForwardingExtension) GetNetworkVariable() string {
	if x != nil {
		return x.NetworkVariable
	}
	return ""
}

func (x *GCEIPForwardingExtension) GetNotConfigurable() bool {
	if x != nil {
		return x.NotConfigurable
	}
	return false
}

type GCEFirewallExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkVariable is used to indicate the network variable in the schema
	// this external IP belongs to.
	NetworkVariable string `protobuf:"bytes,1,opt,name=network_variable,json=networkVariable,proto3" json:"networkVariable" yaml:"networkVariable"` // @gotags: json:"networkVariable" yaml:"networkVariable"
}

func (x *GCEFirewallExtension) Reset() {
	*x = GCEFirewallExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEFirewallExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEFirewallExtension) ProtoMessage() {}

func (x *GCEFirewallExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEFirewallExtension.ProtoReflect.Descriptor instead.
func (*GCEFirewallExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{10}
}

func (x *GCEFirewallExtension) GetNetworkVariable() string {
	if x != nil {
		return x.NetworkVariable
	}
	return ""
}

type GCEFirewallRangeExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FirewallVariable is used to indicate the firewall variable with the type
	// GCEFirewall in the schema to which this firewall range belongs to.
	FirewallVariable string `protobuf:"bytes,1,opt,name=firewall_variable,json=firewallVariable,proto3" json:"firewallVariable" yaml:"firewallVariable"` // @gotags: json:"firewallVariable" yaml:"firewallVariable"
}

func (x *GCEFirewallRangeExtension) Reset() {
	*x = GCEFirewallRangeExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEFirewallRangeExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEFirewallRangeExtension) ProtoMessage() {}

func (x *GCEFirewallRangeExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEFirewallRangeExtension.ProtoReflect.Descriptor instead.
func (*GCEFirewallRangeExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{11}
}

func (x *GCEFirewallRangeExtension) GetFirewallVariable() string {
	if x != nil {
		return x.FirewallVariable
	}
	return ""
}

type GCESubnetworkExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subnetwork variable requires a network context in order to determine the
	// set of available subnetworks. This field references another
	// variable from the schema, which must have type GCENetwork.
	NetworkVariable string `protobuf:"bytes,1,opt,name=network_variable,json=networkVariable,proto3" json:"networkVariable" yaml:"networkVariable"` // @gotags: json:"networkVariable" yaml:"networkVariable"
}

func (x *GCESubnetworkExtension) Reset() {
	*x = GCESubnetworkExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCESubnetworkExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCESubnetworkExtension) ProtoMessage() {}

func (x *GCESubnetworkExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCESubnetworkExtension.ProtoReflect.Descriptor instead.
func (*GCESubnetworkExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{12}
}

func (x *GCESubnetworkExtension) GetNetworkVariable() string {
	if x != nil {
		return x.NetworkVariable
	}
	return ""
}

type GCEGenericResourceExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCE resource type to be fetched. This field references another
	// property from the schema, which must have type GCEGenericResource.
	ResourceVariable string `protobuf:"bytes,1,opt,name=resource_variable,json=resourceVariable,proto3" json:"resourceVariable" yaml:"resourceVariable"` // @gotags: json:"resourceVariable" yaml:"resourceVariable"
}

func (x *GCEGenericResourceExtension) Reset() {
	*x = GCEGenericResourceExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCEGenericResourceExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCEGenericResourceExtension) ProtoMessage() {}

func (x *GCEGenericResourceExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCEGenericResourceExtension.ProtoReflect.Descriptor instead.
func (*GCEGenericResourceExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{13}
}

func (x *GCEGenericResourceExtension) GetResourceVariable() string {
	if x != nil {
		return x.ResourceVariable
	}
	return ""
}

type IAMServiceAccountExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IAM roles that to  grant to a new SA, or the roles to filter
	// existing SAs with.
	Roles []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles" yaml:"roles"` // @gotags: json:"roles" yaml:"roles"
}

func (x *IAMServiceAccountExtension) Reset() {
	*x = IAMServiceAccountExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bpmetadata_ui_ext_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAMServiceAccountExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAMServiceAccountExtension) ProtoMessage() {}

func (x *IAMServiceAccountExtension) ProtoReflect() protoreflect.Message {
	mi := &file_bpmetadata_ui_ext_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAMServiceAccountExtension.ProtoReflect.Descriptor instead.
func (*IAMServiceAccountExtension) Descriptor() ([]byte, []int) {
	return file_bpmetadata_ui_ext_proto_rawDescGZIP(), []int{14}
}

func (x *IAMServiceAccountExtension) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_bpmetadata_ui_ext_proto protoreflect.FileDescriptor

var file_bpmetadata_ui_ext_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x5f,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62,
	0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x0b, 0x0a, 0x17, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x61, 0x0a,
	0x10, 0x67, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x67, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x67, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x67, 0x63,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5e, 0x0a, 0x0c, 0x67, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x43, 0x45, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x67, 0x63, 0x65,
	0x5f, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x43, 0x45, 0x47, 0x50, 0x55, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x63, 0x65, 0x47, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x67, 0x63, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x47, 0x50, 0x55, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67,
	0x63, 0x65, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0b, 0x67, 0x63,
	0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x43, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x5e, 0x0a, 0x0f, 0x67, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x67, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70,
	0x12, 0x64, 0x0a, 0x11, 0x67, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45,
	0x49, 0x50, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x67, 0x63, 0x65, 0x49, 0x70, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0c, 0x67, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43,
	0x45, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12,
	0x67, 0x0a, 0x12, 0x67, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x67, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x67, 0x63, 0x65, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x67, 0x63, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x67, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x43, 0x45, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x67, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x6a,
	0x0a, 0x13, 0x69, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x41, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x67, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x43, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x47, 0x43, 0x45, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x17, 0x47,
	0x43, 0x45, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x47, 0x62, 0x12, 0x41, 0x0a,
	0x1d, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x22, 0x53, 0x0a, 0x13, 0x47, 0x43, 0x45, 0x47, 0x50, 0x55, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70,
	0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x43, 0x45, 0x47, 0x50, 0x55, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x43, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x44, 0x0a,
	0x14, 0x47, 0x43, 0x45, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x43, 0x45, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x56, 0x70, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x47, 0x43, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x50, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x62, 0x70,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49,
	0x70, 0x73, 0x22, 0x70, 0x0a, 0x18, 0x47, 0x43, 0x45, 0x49, 0x50, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x14, 0x47, 0x43, 0x45, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x19, 0x47, 0x43, 0x45, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x43, 0x0a, 0x16, 0x47, 0x43, 0x45, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x47, 0x43, 0x45, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x49, 0x41, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2a, 0xe9, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54,
	0x5f, 0x47, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x5f, 0x47, 0x43,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54,
	0x5f, 0x47, 0x43, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f,
	0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54,
	0x5f, 0x47, 0x43, 0x45, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x50, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x5f, 0x47,
	0x43, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x52,
	0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x5f, 0x47, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x11, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x54, 0x5f, 0x47, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x5f, 0x49, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x54, 0x5f, 0x47, 0x4b, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x14, 0x2a, 0x52, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x5f, 0x45,
	0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x50, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x62, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bpmetadata_ui_ext_proto_rawDescOnce sync.Once
	file_bpmetadata_ui_ext_proto_rawDescData = file_bpmetadata_ui_ext_proto_rawDesc
)

func file_bpmetadata_ui_ext_proto_rawDescGZIP() []byte {
	file_bpmetadata_ui_ext_proto_rawDescOnce.Do(func() {
		file_bpmetadata_ui_ext_proto_rawDescData = protoimpl.X.CompressGZIP(file_bpmetadata_ui_ext_proto_rawDescData)
	})
	return file_bpmetadata_ui_ext_proto_rawDescData
}

var file_bpmetadata_ui_ext_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bpmetadata_ui_ext_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bpmetadata_ui_ext_proto_goTypes = []interface{}{
	(ExtensionType)(0),                  // 0: google.cloud.config.bpmetadata.ExtensionType
	(ExternalIPType)(0),                 // 1: google.cloud.config.bpmetadata.ExternalIPType
	(*GooglePropertyExtension)(nil),     // 2: google.cloud.config.bpmetadata.GooglePropertyExtension
	(*GCELocationExtension)(nil),        // 3: google.cloud.config.bpmetadata.GCELocationExtension
	(*GCEMachineTypeExtension)(nil),     // 4: google.cloud.config.bpmetadata.GCEMachineTypeExtension
	(*GCEGPUTypeExtension)(nil),         // 5: google.cloud.config.bpmetadata.GCEGPUTypeExtension
	(*GCEGPUCountExtension)(nil),        // 6: google.cloud.config.bpmetadata.GCEGPUCountExtension
	(*GCEDiskTypeExtension)(nil),        // 7: google.cloud.config.bpmetadata.GCEDiskTypeExtension
	(*GCEDiskSizeExtension)(nil),        // 8: google.cloud.config.bpmetadata.GCEDiskSizeExtension
	(*GCENetworkExtension)(nil),         // 9: google.cloud.config.bpmetadata.GCENetworkExtension
	(*GCEExternalIPExtension)(nil),      // 10: google.cloud.config.bpmetadata.GCEExternalIPExtension
	(*GCEIPForwardingExtension)(nil),    // 11: google.cloud.config.bpmetadata.GCEIPForwardingExtension
	(*GCEFirewallExtension)(nil),        // 12: google.cloud.config.bpmetadata.GCEFirewallExtension
	(*GCEFirewallRangeExtension)(nil),   // 13: google.cloud.config.bpmetadata.GCEFirewallRangeExtension
	(*GCESubnetworkExtension)(nil),      // 14: google.cloud.config.bpmetadata.GCESubnetworkExtension
	(*GCEGenericResourceExtension)(nil), // 15: google.cloud.config.bpmetadata.GCEGenericResourceExtension
	(*IAMServiceAccountExtension)(nil),  // 16: google.cloud.config.bpmetadata.IAMServiceAccountExtension
}
var file_bpmetadata_ui_ext_proto_depIdxs = []int32{
	0,  // 0: google.cloud.config.bpmetadata.GooglePropertyExtension.type:type_name -> google.cloud.config.bpmetadata.ExtensionType
	4,  // 1: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_machine_type:type_name -> google.cloud.config.bpmetadata.GCEMachineTypeExtension
	8,  // 2: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_disk_size:type_name -> google.cloud.config.bpmetadata.GCEDiskSizeExtension
	14, // 3: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_subnetwork:type_name -> google.cloud.config.bpmetadata.GCESubnetworkExtension
	15, // 4: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_resource:type_name -> google.cloud.config.bpmetadata.GCEGenericResourceExtension
	5,  // 5: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_gpu_type:type_name -> google.cloud.config.bpmetadata.GCEGPUTypeExtension
	6,  // 6: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_gpu_count:type_name -> google.cloud.config.bpmetadata.GCEGPUCountExtension
	9,  // 7: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_network:type_name -> google.cloud.config.bpmetadata.GCENetworkExtension
	10, // 8: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_external_ip:type_name -> google.cloud.config.bpmetadata.GCEExternalIPExtension
	11, // 9: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_ip_forwarding:type_name -> google.cloud.config.bpmetadata.GCEIPForwardingExtension
	12, // 10: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_firewall:type_name -> google.cloud.config.bpmetadata.GCEFirewallExtension
	13, // 11: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_firewall_range:type_name -> google.cloud.config.bpmetadata.GCEFirewallRangeExtension
	3,  // 12: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_zone:type_name -> google.cloud.config.bpmetadata.GCELocationExtension
	3,  // 13: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_region:type_name -> google.cloud.config.bpmetadata.GCELocationExtension
	16, // 14: google.cloud.config.bpmetadata.GooglePropertyExtension.iam_service_account:type_name -> google.cloud.config.bpmetadata.IAMServiceAccountExtension
	7,  // 15: google.cloud.config.bpmetadata.GooglePropertyExtension.gce_disk_type:type_name -> google.cloud.config.bpmetadata.GCEDiskTypeExtension
	1,  // 16: google.cloud.config.bpmetadata.GCEExternalIPExtension.type:type_name -> google.cloud.config.bpmetadata.ExternalIPType
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_bpmetadata_ui_ext_proto_init() }
func file_bpmetadata_ui_ext_proto_init() {
	if File_bpmetadata_ui_ext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bpmetadata_ui_ext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GooglePropertyExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCELocationExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEMachineTypeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEGPUTypeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEGPUCountExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEDiskTypeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEDiskSizeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCENetworkExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEExternalIPExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEIPForwardingExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEFirewallExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEFirewallRangeExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCESubnetworkExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCEGenericResourceExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bpmetadata_ui_ext_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAMServiceAccountExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bpmetadata_ui_ext_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bpmetadata_ui_ext_proto_goTypes,
		DependencyIndexes: file_bpmetadata_ui_ext_proto_depIdxs,
		EnumInfos:         file_bpmetadata_ui_ext_proto_enumTypes,
		MessageInfos:      file_bpmetadata_ui_ext_proto_msgTypes,
	}.Build()
	File_bpmetadata_ui_ext_proto = out.File
	file_bpmetadata_ui_ext_proto_rawDesc = nil
	file_bpmetadata_ui_ext_proto_goTypes = nil
	file_bpmetadata_ui_ext_proto_depIdxs = nil
}
